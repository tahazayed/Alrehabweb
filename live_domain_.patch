Index: app/src/main/java/com/taha/alrehab/DB/UserDBHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/taha/alrehab/DB/UserDBHandler.java	(revision )
+++ app/src/main/java/com/taha/alrehab/DB/UserDBHandler.java	(revision )
@@ -0,0 +1,104 @@
+package com.taha.alrehab.DB;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+
+public class UserDBHandler extends SQLiteOpenHelper {
+    public static final String TABLE_USER = "user";
+    public static final String COLUMN_USERID = "userId";
+
+
+    private static final int DATABASE_VERSION = 1;
+    private static final String DATABASE_NAME = "Usersdb.db";
+
+
+    //We need to pass database information along to superclass
+    public UserDBHandler(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {
+        super(context, DATABASE_NAME, factory, DATABASE_VERSION);
+    }
+
+    public UserDBHandler(Context context) {
+        super(context, DATABASE_NAME, null, DATABASE_VERSION);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        String query = "CREATE TABLE " + TABLE_USER + "(" +
+                COLUMN_USERID + " varchar(50) PRIMARY KEY NOT NULL); ";
+
+        db.execSQL(query);
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_USER);
+        onCreate(db);
+    }
+
+    //Add a new row to the database
+    public void addUser(String userID) {
+        try {
+
+            SQLiteDatabase db = getWritableDatabase();
+            ContentValues values = new ContentValues();
+            values.put(COLUMN_USERID, userID);
+
+            db.insert(TABLE_USER, null, values);
+            db.close();
+        } catch (Exception ex) {
+            String error = ex.getMessage();
+        }
+    }
+
+    public int updateUser(String userID) {
+
+        deleteUser(userID);
+        addUser(userID);
+        return 1;
+
+    }
+
+
+    public void deleteUser(String userID) {
+        SQLiteDatabase db = getWritableDatabase();
+        db.execSQL("DELETE FROM " + TABLE_USER + " WHERE " + COLUMN_USERID + "='" + userID + "';");
+        db.close();
+    }
+
+
+    public String getUserId() {
+        String userId = "";
+        SQLiteDatabase db = getReadableDatabase();
+        String query = "select * from " + TABLE_USER + ";";
+
+        Cursor cursor = db.rawQuery(query, null);
+
+
+        if (cursor != null) {
+
+            if (cursor.moveToFirst()) {
+
+
+                try {
+                    userId = cursor.getString(cursor.getColumnIndex(COLUMN_USERID));
+
+                } catch (Exception e) {
+                    String error = e.getMessage();
+                }
+
+            }
+        }
+        db.close();
+        try {
+            if (cursor != null)
+                cursor.close();
+        } catch (Exception ex) {
+            String error = ex.getMessage();
+        }
+
+        return userId;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/taha/alrehab/JSON/AlrehabNotificationsJSONHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/taha/alrehab/JSON/AlrehabNotificationsJSONHandler.java	(revision )
+++ app/src/main/java/com/taha/alrehab/JSON/AlrehabNotificationsJSONHandler.java	(revision )
@@ -0,0 +1,122 @@
+package com.taha.alrehab.JSON;
+
+import android.os.AsyncTask;
+
+import com.google.gson.Gson;
+import com.taha.alrehab.BusinessEntities.AlrehabNotification;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+public class AlrehabNotificationsJSONHandler extends AsyncTask<String, String, List<AlrehabNotification>> {
+
+    public static final String COLUMN_ID = "Id";
+    public static final String COLUMN_TITLE = "Title";
+    public static final String COLUMN_PUBLISHDATE = "PublishDate";
+    public static final String COLUMN_IMAGEURL = "ImageUrl";
+    public static final String COLUMN_IMAGETHUMBURL = "ImageThumbUrl";
+    public static final String COLUMN_TYPE = "Type";
+    private final AlrehabNotificationsJSONHandlerClient mClient;
+    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
+
+    public AlrehabNotificationsJSONHandler(AlrehabNotificationsJSONHandlerClient client) {
+        mClient = client;
+    }
+
+    @Override
+    protected void onPreExecute() {
+        super.onPreExecute();
+
+    }
+
+    @Override
+    protected List<AlrehabNotification> doInBackground(String... params) {
+        HttpURLConnection connection = null;
+        BufferedReader reader = null;
+        List<AlrehabNotification> AlrehabNotificationList = new ArrayList<>();
+        try {
+            URL url = new URL(params[0]);
+            connection = (HttpURLConnection) url.openConnection();
+            connection.connect();
+            InputStream stream = connection.getInputStream();
+            reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
+            StringBuilder buffer = new StringBuilder();
+            String line;
+            while ((line = reader.readLine()) != null) {
+                buffer.append(line);
+            }
+
+            String finalJson = buffer.toString();
+
+            //JSONObject parentObject = new JSONObject(finalJson);
+            // JSONArray parentArray = parentObject.getJSONArray("stories");
+            JSONArray parentArray = new JSONArray(finalJson);
+
+
+            Gson gson = new Gson();
+            for (int i = 0; i < parentArray.length(); i++) {
+
+                JSONObject finalObject = parentArray.getJSONObject(i);
+                try {
+                    int _id = finalObject.getInt(COLUMN_ID);
+                    String _title = finalObject.getString(COLUMN_TITLE);
+                    Date _publishdate = dateFormat.parse(finalObject.getString(COLUMN_PUBLISHDATE));
+                    String _imageUrl = finalObject.getString(COLUMN_IMAGEURL);
+                    String _imageThumbUrl = finalObject.getString(COLUMN_IMAGETHUMBURL);
+                    int _type = finalObject.getInt(COLUMN_TYPE);
+                    _imageUrl = _imageUrl.replace("../", "http://test.alrehablife.com/");
+                    _imageThumbUrl = _imageThumbUrl.replace("../", "http://test.alrehablife.com/");
+                    AlrehabNotificationList.add(new AlrehabNotification(_id,
+                            _title,
+                            _publishdate,
+                            _imageUrl,
+                            _imageThumbUrl,
+                            _type));
+
+
+                } catch (Exception ex) {
+                    String error = ex.getMessage();
+                }
+            }
+
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            if (connection != null) {
+                connection.disconnect();
+            }
+            try {
+                if (reader != null) {
+                    reader.close();
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        return AlrehabNotificationList;
+    }
+
+    @Override
+    protected void onPostExecute(List<AlrehabNotification> result) {
+
+        mClient.onAlrehabNotificationsJSONHandlerClientResult(result);
+
+
+    }
+
+    public interface AlrehabNotificationsJSONHandlerClient {
+        void onAlrehabNotificationsJSONHandlerClientResult(List<AlrehabNotification> result);
+    }
+}
\ No newline at end of file
Index: app/src/test/java/com/taha/alrehab/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/taha/alrehab/ExampleUnitTest.java	(revision )
+++ app/src/test/java/com/taha/alrehab/ExampleUnitTest.java	(revision )
@@ -0,0 +1,15 @@
+package com.taha.alrehab;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * To work on unit tests, switch the Test Artifact in the Build Variants view.
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/taha/alrehab/BusinessEntities/AlrehabNotification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/taha/alrehab/BusinessEntities/AlrehabNotification.java	(revision )
+++ app/src/main/java/com/taha/alrehab/BusinessEntities/AlrehabNotification.java	(revision )
@@ -0,0 +1,83 @@
+package com.taha.alrehab.BusinessEntities;
+
+import java.util.Date;
+
+public class AlrehabNotification {
+    private int _id;
+    private String _title;
+
+    private Date _publishdate;
+
+    private String _imageUrl;
+    private String _imageThumbUrl;
+
+    private int _type;
+
+    public AlrehabNotification() {
+    }
+
+    public AlrehabNotification(int id,
+                               String title,
+                               Date publishdate,
+                               String imageUrl,
+                               String imageThumbUrl,
+                               int type
+    ) {
+        this._id = id;
+        this._title = title;
+        this._publishdate = publishdate;
+        this._imageUrl = imageUrl;
+        this._imageThumbUrl = imageThumbUrl;
+        this._type = type;
+    }
+
+    public int get_id() {
+        return _id;
+    }
+
+    public void set_id(int _id) {
+        this._id = _id;
+    }
+
+    public String get_title() {
+        return _title;
+    }
+
+    public void set_title(String _title) {
+        this._title = _title;
+    }
+
+
+    public Date get_publishdate() {
+        return _publishdate;
+    }
+
+    public void set_publishdate(Date _publishdate) {
+        this._publishdate = _publishdate;
+    }
+
+
+    public String get_imageUrl() {
+        return _imageUrl;
+    }
+
+    public void set_imageUrl(String _imageUrl) {
+        this._imageUrl = _imageUrl;
+    }
+
+    public String get_imageThumbUrl() {
+        return _imageThumbUrl;
+    }
+
+    public void set_imageThumbUrl(String _imageThumbUrl) {
+        this._imageThumbUrl = _imageThumbUrl;
+    }
+
+    public int get_type() {
+        return _type;
+    }
+
+    public void set_type(int _type) {
+        this._type = _type;
+    }
+}
Index: app/src/main/java/com/taha/alrehab/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/taha/alrehab/MainActivity.java	(revision )
+++ app/src/main/java/com/taha/alrehab/MainActivity.java	(revision )
@@ -0,0 +1,282 @@
+package com.taha.alrehab;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.support.v7.app.ActionBar;
+import android.support.v7.app.AppCompatActivity;
+import android.view.GestureDetector;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.webkit.CookieManager;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+import android.widget.Toast;
+
+import com.taha.alrehab.BackgroundServices.NotificationsService;
+
+//import android.webkit.WebChromeClient;
+//import android.widget.ProgressBar;
+
+public class MainActivity extends AppCompatActivity implements GestureDetector.OnGestureListener,
+        GestureDetector.OnDoubleTapListener {
+
+    /**
+     * Some older devices needs a small delay between UI widget updates
+     * and a change of the status and navigation bar.
+     */
+    private static final int UI_ANIMATION_DELAY = 2000;
+    private final Handler mHideHandler = new Handler();
+    protected WebView browser = null;
+    protected GestureDetector gestureDetector;
+    private View mContentView;
+    private final Runnable mHidePart2Runnable = new Runnable() {
+        @SuppressLint("InlinedApi")
+        @Override
+        public void run() {
+            // Delayed removal of status and navigation bar
+
+            // Note that some of these constants are new as of API 16 (Jelly Bean)
+            // and API 19 (KitKat). It is safe to use them, as they are inlined
+            // at compile-time and do nothing on earlier devices.
+            mContentView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE
+                    //| View.SYSTEM_UI_FLAG_FULLSCREEN
+                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
+                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
+                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
+                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
+        }
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        this.gestureDetector = new GestureDetector(this, this);
+        this.gestureDetector.setOnDoubleTapListener(this);
+
+        browser = (WebView) findViewById(R.id.webView);
+
+        mContentView = browser;
+
+
+        browser = (WebView) findViewById(R.id.webView);
+
+        CookieManager.getInstance().acceptCookie();
+        WebSettings webSettings = browser.getSettings();
+
+        webSettings.setJavaScriptEnabled(true);
+        webSettings.setLoadsImagesAutomatically(true);
+        webSettings.getAllowContentAccess();
+        webSettings.setAppCacheEnabled(true);
+        webSettings.setDisplayZoomControls(true);
+        webSettings.setDomStorageEnabled(true);
+        webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);
+        webSettings.setLoadWithOverviewMode(true);
+
+
+        browser.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
+        browser.setKeepScreenOn(false);
+
+
+        WebViewClientImpl webViewClient = new WebViewClientImpl(this);
+        browser.setWebViewClient(webViewClient);
+
+
+//        browser.setWebChromeClient(new WebChromeClient() {
+//            public void onProgressChanged(WebView view, int newProgress) {
+//                ProgressBar progressBar = (ProgressBar) findViewById(R.id.progressBar);
+//                if (newProgress < 100 && progressBar.getVisibility() == ProgressBar.GONE) {
+//                    progressBar.setVisibility(ProgressBar.VISIBLE);
+//                }
+//                progressBar.setProgress(newProgress);
+//                //progressTxt.setText(newProgress);
+//                if (newProgress == 100) {
+//                    progressBar.setVisibility(ProgressBar.GONE);
+//                }
+//            }
+//        });
+
+        if (isConnectingToInternet(getApplicationContext())) {
+            browser.loadUrl(getString(R.string.SiteURL));
+
+            Intent CurrIntent = getIntent();
+            if (CurrIntent.hasExtra("Type") && CurrIntent.hasExtra("Id")) {
+                Bundle extras = getIntent().getExtras();
+                int type = 0;
+                String id = "";
+                if (!extras.getString("Type").equals(null)) {
+                    type = Integer.parseInt(extras.getString("Type"));
+                }
+                if (!extras.getString("Id").equals(null)) {
+                    id = extras.getString("Id");
+                }
+                String url = getString(R.string.SiteURL);
+                switch (type) {
+                    case 1:
+                        url += "News/newsDetails.html#/?storyId=" + id;
+                        break;
+                    case 2:
+                        url += "Events/eventsDetails.html#/?eventId=" + id;
+                        break;
+                }
+                RefreshPage();
+                browser.loadUrl(url);
+            }
+
+
+            Intent intent = new Intent(this, NotificationsService.class);
+            startService(intent);
+            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+        } else {
+            // show alert
+            Toast.makeText(getApplicationContext(), "no internet", Toast.LENGTH_LONG).show();
+        }
+
+
+    }
+
+    protected void RefreshPage() {
+        browser = (WebView) findViewById(R.id.webView);
+        browser.reload();
+    }
+
+    @Override
+    protected void onPostCreate(Bundle savedInstanceState) {
+        super.onPostCreate(savedInstanceState);
+        hide();
+
+    }
+
+    private void hide() {
+        // Hide UI first
+        ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.hide();
+        }
+
+        // Schedule a runnable to remove the status and navigation bar after a delay
+
+        mHideHandler.postDelayed(mHidePart2Runnable, UI_ANIMATION_DELAY);
+    }
+
+    @Override
+    public void onBackPressed() {
+        browser = (WebView) findViewById(R.id.webView);
+        if (browser.canGoBack()) {
+            browser.goBack();
+        } else {
+            super.onBackPressed();
+        }
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        this.gestureDetector.onTouchEvent(event);
+        return super.onTouchEvent(event);
+    }
+
+    @Override
+    public boolean onDown(MotionEvent e) {
+        RefreshPage();
+        return true;
+    }
+
+    @Override
+    public void onShowPress(MotionEvent e) {
+
+    }
+
+    @Override
+    public boolean onSingleTapUp(MotionEvent e) {
+        RefreshPage();
+        return true;
+    }
+
+    @Override
+    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
+        RefreshPage();
+        return true;
+    }
+
+    @Override
+    public void onLongPress(MotionEvent e) {
+
+    }
+
+    @Override
+    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+        RefreshPage();
+        return true;
+    }
+
+    @Override
+    public boolean onDoubleTap(MotionEvent e) {
+        RefreshPage();
+        return true;
+    }
+
+    @Override
+    public boolean onSingleTapConfirmed(MotionEvent e) {
+        RefreshPage();
+        return true;
+    }
+
+    @Override
+    public boolean onDoubleTapEvent(MotionEvent e) {
+        RefreshPage();
+        return true;
+    }
+
+    private boolean isConnectingToInternet(Context applicationContext) {
+        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo ni = cm.getActiveNetworkInfo();
+        if (ni == null) {
+            // There are no active networks.
+            Toast.makeText(getApplicationContext(), "no internet", Toast.LENGTH_LONG).show();
+            return false;
+        } else
+            return true;
+
+    }
+
+
+    public class WebViewClientImpl extends WebViewClient {
+
+        private Activity activity = null;
+
+        public WebViewClientImpl(Activity activity) {
+            this.activity = activity;
+
+        }
+
+        @Override
+        public boolean shouldOverrideUrlLoading(WebView webView, String url) {
+            if (url.contains(getString(R.string.SiteDomain))) {
+                return false;
+            }
+
+            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+            activity.startActivity(intent);
+            return true;
+        }
+
+
+        @Override
+        public void onPageFinished(WebView view, String url) {
+            super.onPageFinished(view, url);
+
+
+        }
+
+
+    }
+}
Index: app/src/androidTest/java/com/taha/alrehab/ApplicationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/androidTest/java/com/taha/alrehab/ApplicationTest.java	(revision )
+++ app/src/androidTest/java/com/taha/alrehab/ApplicationTest.java	(revision )
@@ -0,0 +1,13 @@
+package com.taha.alrehab;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/taha/alrehab/BackgroundServices/NotificationsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/taha/alrehab/BackgroundServices/NotificationsService.java	(revision )
+++ app/src/main/java/com/taha/alrehab/BackgroundServices/NotificationsService.java	(revision )
@@ -0,0 +1,184 @@
+package com.taha.alrehab.BackgroundServices;
+
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.app.Service;
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.Resources;
+import android.graphics.BitmapFactory;
+import android.os.IBinder;
+import android.support.v4.app.NotificationCompat;
+import android.util.Log;
+
+import com.taha.alrehab.BusinessEntities.AlrehabNotification;
+import com.taha.alrehab.DB.UserDBHandler;
+import com.taha.alrehab.JSON.AlrehabNotificationsJSONHandler;
+import com.taha.alrehab.MainActivity;
+import com.taha.alrehab.R;
+
+import java.util.List;
+import java.util.Random;
+import java.util.Timer;
+import java.util.TimerTask;
+import java.util.UUID;
+
+public class NotificationsService extends Service implements AlrehabNotificationsJSONHandler.AlrehabNotificationsJSONHandlerClient {
+
+    private static final String TAG = "NotificationsService";
+    public static boolean isRunning = false;
+    static String userId;
+    private static long UPDATE_INTERVAL = 15 * 60 * 1000;  //default
+    private static Timer timer = new Timer();
+    private boolean IsDebug = true;
+
+    @Override
+    public void onCreate() {
+        if (IsDebug) Log.d(TAG, "Service onCreate");
+
+        isRunning = true;
+        UserDBHandler db = new UserDBHandler(getApplicationContext());
+        userId = db.getUserId();
+        if (userId.isEmpty()) {
+            userId = UUID.randomUUID().toString();
+            db.updateUser(userId);
+        }
+        db.close();
+
+    }
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+
+        if (IsDebug) Log.d(TAG, "Service onStartCommand");
+
+        timer.scheduleAtFixedRate(
+
+                new TimerTask() {
+
+                    public void run() {
+
+                        doServiceWork();
+
+                    }
+                }, 1000, UPDATE_INTERVAL);
+        if (IsDebug) Log.d(TAG, "Timer started....");
+
+        return Service.START_STICKY;
+    }
+
+
+    @Override
+    public IBinder onBind(Intent arg0) {
+        if (IsDebug) Log.d(TAG, "Service onBind");
+        return null;
+    }
+
+    private void doServiceWork() {
+
+        try {
+            new AlrehabNotificationsJSONHandler(NotificationsService.this).execute(getString(R.string.NotificationAPI) + userId);
+            if (IsDebug) Log.d(TAG, "StoriesJSONHandler invoked...");
+
+        } catch (Exception e) {
+            String error = e.getMessage();
+        }
+
+    }
+
+    @Override
+    public void onDestroy() {
+
+        isRunning = false;
+
+        if (timer != null) timer.cancel();
+        if (IsDebug) Log.d(TAG, "Timer stopped...");
+
+        if (IsDebug) Log.d(TAG, "Service onDestroy");
+    }
+
+    @Override
+    public void onAlrehabNotificationsJSONHandlerClientResult(List<AlrehabNotification> list) {
+        if (IsDebug)
+            Log.d(TAG, "onAlrehabNotificationsJSONHandlerJSONHandlerClientResult invoked..." + list.size());
+
+
+        final Random rand = new Random();
+        rand.setSeed(100);
+        if (list.size() > 0) {
+            //NotificationManagerCompat.from(this).cancelAll();
+            NotificationManager nm = (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE);
+            Resources res = getApplicationContext().getResources();
+            for (AlrehabNotification oAlrehabNotification : list) {
+                int msgId = rand.nextInt();
+                Intent notificationIntent = new Intent(this, MainActivity.class);
+
+                notificationIntent.putExtra("Type", (Integer.toString(oAlrehabNotification.get_type())));
+                notificationIntent.putExtra("Id", (Integer.toString(oAlrehabNotification.get_id())));
+
+                PendingIntent contentIntent = PendingIntent.getActivity(getApplicationContext(),
+                        msgId, notificationIntent,
+                        PendingIntent.FLAG_UPDATE_CURRENT);
+
+
+                NotificationCompat.Builder builder = new NotificationCompat.Builder(getApplicationContext());
+                builder
+                        //.addAction(R.mipmap.ic_launcher, oAlrehabNotification.get_title(), contentIntent)
+                        .setContentIntent(contentIntent)
+                        .setSmallIcon(R.mipmap.ic_launcher)
+                        .setLargeIcon(BitmapFactory.decodeResource(res, R.mipmap.ic_launcher))
+                        .setTicker(oAlrehabNotification.get_title())
+                        .setWhen(System.currentTimeMillis())
+                        .setAutoCancel(true)
+                        .setContentTitle(oAlrehabNotification.get_title())
+                        .setContentText(oAlrehabNotification.get_title())
+                                //.setExtras(extras)
+                        .setOnlyAlertOnce(false)
+                        .setGroup("Alrehab")
+                        .setGroupSummary(false)
+                        .setCategory("news");
+
+
+                Notification n = builder.build();
+
+                n.defaults |= Notification.DEFAULT_ALL;
+                nm.notify(msgId, n);
+            }
+           /* Intent notificationIntent = new Intent(this, MainActivity.class);
+
+
+            PendingIntent contentIntent = PendingIntent.getActivity(getApplicationContext(),
+                    0, notificationIntent,
+                    PendingIntent.FLAG_UPDATE_CURRENT);
+
+
+            NotificationManager nm = (NotificationManager) this.getSystemService(getApplicationContext().NOTIFICATION_SERVICE);
+
+            NotificationCompat.Builder builder = new NotificationCompat.Builder(getApplicationContext());
+            builder.setContentIntent(contentIntent)
+                    .setSmallIcon(R.mipmap.ic_launcher)
+                    .setLargeIcon(BitmapFactory.decodeResource(res, R.mipmap.ic_launcher))
+                    .setTicker("You Have : "+Integer.toString(list.size()))
+                    .setWhen(System.currentTimeMillis())
+                    .setAutoCancel(true)
+                    .setContentTitle("Alrehab")
+                    .setContentText("You Have : " + Integer.toString(list.size()))
+                            //.setExtras(extras)
+                    .setOnlyAlertOnce(false)
+                    .setGroup("Alrehab")
+                    .setGroupSummary(true)
+                    .setCategory("news").build();
+
+
+            Notification n = builder.getNotification();
+
+            n.defaults |= Notification.DEFAULT_ALL;
+            nm.notify(0, n);*/
+        }
+
+
+    }
+
+
+}
\ No newline at end of file
